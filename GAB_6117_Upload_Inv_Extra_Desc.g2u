Program.Sub.ScreenSU.Start
Gui.Form..Create(BaseForm)
Gui.Form..Caption("Update/Insert Inventory Extra Description")
Gui.Form..Size(11970,2085)
Gui.Form..MinX(0)
Gui.Form..MinY(0)
Gui.Form..Position(0,0)
Gui.Form..BackColor(-2147483633)
Gui.Form..MousePointer(0)
Gui.Form..Event(UnLoad,Form_UnLoad)
Gui.Form..AlwaysOnTop(False)
Gui.Form..FontName("Tahoma")
Gui.Form..FontSize(8.25)
Gui.Form..ControlBox(True)
Gui.Form..MaxButton(True)
Gui.Form..MinButton(True)
Gui.Form..Moveable(True)
Gui.Form..Sizeable(False)
Gui.Form..ShowInTaskBar(True)
Gui.Form..TitleBar(True)
Gui.Form.progressBar1.Create(ProgressBar)
Gui.Form.progressBar1.Size(10575,210)
Gui.Form.progressBar1.Position(1170,1320)
Gui.Form.progressBar1.Visible(True)
Gui.Form.cmdLoad.Create(Button)
Gui.Form.cmdLoad.Size(855,375)
Gui.Form.cmdLoad.Position(1170,720)
Gui.Form.cmdLoad.Caption("Load")
Gui.Form.cmdLoad.Event(Click,cmdLoad_Click)
Gui.Form.cmdLoad.Enabled(True)
Gui.Form.cmdLoad.Visible(True)
Gui.Form.cmdLoad.Zorder(0)
Gui.Form.cmdLoad.FontName("Tahoma")
Gui.Form.cmdLoad.FontSize(8.25)
Gui.Form.lbl2.Create(Label,"File",True,555,255,0,240,270,True,0,"Arial",8,-2147483633,0,0)
Gui.Form.lbl2.BorderStyle(0)
Gui.Form.txtFile.Create(TextBox,"",True,9585,300,0,1170,180,True,0,"Arial",8,-2147483643,1)
Gui.Form.cmdBrowse.Create(Button)
Gui.Form.cmdBrowse.Size(855,375)
Gui.Form.cmdBrowse.Position(10875,135)
Gui.Form.cmdBrowse.Caption("Browse")
Gui.Form.cmdBrowse.Event(Click,cmdBrowse_Click)
Gui.Form.cmdBrowse.Enabled(True)
Gui.Form.cmdBrowse.Visible(True)
Gui.Form.cmdBrowse.Zorder(0)
Gui.Form.cmdBrowse.FontName("Tahoma")
Gui.Form.cmdBrowse.FontSize(8.25)
Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start
	V.Global.sLogFileName.Declare(String)
Program.Sub.Preflight.End

Program.Sub.Main.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	V.Local.bFileExists.Declare
	
	'If the Log File exist, delete it
	F.Intrinsic.String.Concat(V.System.Temp,"\GSS\GAP_6117_",V.Caller.User.Trim,"_",V.Caller.Terminal.Trim,".txt",V.Global.sLogFileName)
	F.Intrinsic.File.Exists(V.Global.sLogFileName,v.Local.bFileExists)
	F.Intrinsic.Control.If(v.Local.bFileExists)
		F.Intrinsic.File.DeleteFile(V.Global.sLogFileName)
	F.Intrinsic.Control.EndIf

	f.ODBC.Connection!conx.OpenCompanyConnection(500)
	gui.Form..Show

F.Intrinsic.Control.Catch
    F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
    F.Intrinsic.UI.Msgbox(V.Local.sError)
    F.Intrinsic.Control.CallSub("Unload")
F.Intrinsic.Control.EndTry
Program.Sub.Main.End

Program.Sub.Unload.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	V.Local.sFile.Declare
	V.Local.bFileExists.Declare

	F.Intrinsic.Control.If(V.ODBC.conx.State,=,1)
		F.ODBC.Connection!conx.close
	F.Intrinsic.Control.EndIf
	
	'Check whether the log file exist and contains data
	F.Intrinsic.File.Exists(V.Global.sLogFileName,v.Local.bFileExists)
	F.Intrinsic.Control.If(v.Local.bFileExists)
		F.Intrinsic.File.File2String(V.Global.sLogFileName,V.Local.sFile)
		F.Intrinsic.String.Split(V.Local.sFile,V.Ambient.NewLine,V.Local.sFile)
		F.Intrinsic.Control.If(V.Local.sFile.UBound,>,0)
			F.Intrinsic.Task.ShellExec("","",V.Global.sLogFileName,"","",1)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.End

F.Intrinsic.Control.Catch
	Function.Intrinsic.String.Build("Subroutine Error {0}{0}Subroutine: {1}{0}Error Occurred {2} with description {3}",V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.End	
F.Intrinsic.Control.End
Program.Sub.Unload.End

Program.Sub.cmdLoad_Click.Start
'f.Intrinsic.Control.Try
	v.Local.sError.Declare
	v.Local.sFile.Declare
	v.Local.bEx.Declare
	v.Local.sSQL.Declare
	v.Local.sPart.Declare
	v.Local.sExtraDesc.Declare
	V.Local.sRev.Declare
	V.Local.iTRow.Declare
	V.Local.iRow.Declare
	V.Local.sRow.Declare
	V.Local.sFileRW.Declare
	V.Local.bFileExists.Declare
	
	V.Local.bFileExists.Set(False)
'	V.Local.sFileRW.Set("")
	
	'Check file existing
	v.Local.sFile.Set(v.Screen.Form!txtFile.text.trim)
	f.Intrinsic.File.Exists(v.Local.sFile,v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx.Not)
		f.Intrinsic.UI.Msgbox("File does not exist")
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	F.Intrinsic.UI.InvokeWaitDialog("Loading Excel File")
	
	F.Automation.MSExcel.CreateAppObject("MSExcel")
	F.Automation.MSExcel.OpenWorkbook("MSExcel","UPL",V.Local.sFile)
	
	F.Automation.MSExcel.OpenWorksheet("UPL","UPLSheet",1)
	F.Automation.MSExcel.RowCount("UPLSheet",V.Local.iTRow)
	
	F.Intrinsic.UI.CloseWaitDialog
	Function.Intrinsic.UI.Sleep(1)
	
	gui.Form.progressBar1.Max(V.Local.iTRow)
	gui.Form.progressBar1.Min(0)
	gui.Form.progressBar1.Value(0)
	F.Intrinsic.Control.For(V.Local.iRow,2,V.Local.iTRow,1)
		F.Automation.MSExcel.ReadRow("UPLSheet",V.Local.iRow,1,3,V.Local.sRow)
		F.Intrinsic.String.Split(V.Local.sRow,"*!*",V.Local.sRow)
		
		v.Local.sPart.Set(V.Local.sRow(0))
		v.Local.sRev.Set(V.Local.sRow(1))
		f.Intrinsic.String.GSSPartString(v.Local.sPart.Trim,v.Local.sRev.Trim,v.Local.sPart)
		
		v.Local.sExtraDesc.Set(v.Local.sRow(2))
		f.Intrinsic.String.Replace(v.Local.sExtraDesc.Trim,"'","",v.Local.sExtraDesc)

		'Check whether the Part exists in Inventory
		'If it doesn't exist then it is skipped and write a log to a text file
		f.Intrinsic.String.Build("SELECT * FROM INVENTORY_MSTR WHERE PART = '{0}'",v.Local.sPart.PSQLFriendly,v.Local.sSQL)
		F.ODBC.Connection!conx.OpenLocalRecordsetRO("rstInv",V.Local.sSQL)
		F.Intrinsic.Control.If(V.ODBC.conx!rstInv.EOF,<>,True)
			f.Intrinsic.String.Build("SELECT * FROM INV_EXTRA_TEXT WHERE PART = '{0}'",v.Local.sPart.PSQLFriendly,v.Local.sSQL)
			F.ODBC.Connection!conx.OpenLocalRecordsetRO("rstText",V.Local.sSQL)
			F.Intrinsic.Control.If(V.ODBC.conx!rstText.EOF,<>,True)
				f.Intrinsic.String.Build("UPDATE INV_EXTRA_TEXT SET TEXT = '{0}' WHERE PART = '{1}'",v.Local.sExtraDesc.PSQLFriendly,v.Local.sPart.PSQLFriendly,v.Local.sSQL)
				f.ODBC.Connection!conx.Execute(v.Local.sSQL)
			F.Intrinsic.Control.Else
				f.Intrinsic.String.Build("INSERT INTO INV_EXTRA_TEXT(PART, TEXT) VALUES('{0}','{1}')",v.Local.sPart.PSQLFriendly,v.Local.sExtraDesc.PSQLFriendly,v.Local.sSQL)
				f.ODBC.Connection!conx.Execute(v.Local.sSQL)
			F.Intrinsic.Control.EndIf
			F.ODBC.conx!rstText.Close
		F.Intrinsic.Control.Else
			'Write the skipped record to a text file
			'F.Intrinsic.String.Build("{0}Skipped line {1} - Part = {2}{3} Extra Description = {4}{5}",V.Local.sFileRW,V.Local.iRow,V.Local.sPart,V.Ambient.Tab,V.Local.sExtraDesc,V.Ambient.NewLine,V.Local.sFileRW)
			V.Local.sFileRW.Set("")
			F.Intrinsic.String.Build("Skipped line {0} - Part = {1}{2} Extra Description = {3}{4}",V.Local.iRow,V.Local.sPart,V.Ambient.Tab,V.Local.sExtraDesc,V.Ambient.NewLine,V.Local.sFileRW)
			F.Intrinsic.Control.If(V.Local.bFileExists)
				Function.Intrinsic.File.PrependToFile(V.Global.sLogFileName,V.Local.sFileRW)
			F.Intrinsic.Control.Else
				F.Intrinsic.File.String2File(V.Global.sLogFileName,V.Local.sFileRW)
				V.Local.bFileExists.Set(True)
			F.Intrinsic.Control.EndIf
			
		F.Intrinsic.Control.EndIf
		F.ODBC.conx!rstInv.Close
		
'		'Write the Error Log to Log File
'		F.Intrinsic.Control.If(V.Local.sFileRW,<>,"")
'			F.Intrinsic.File.String2File(V.Global.sLogFileName,V.Local.sFileRW)
'		F.Intrinsic.Control.EndIf
		
		gui.Form.progressBar1.Value(V.Local.iRow)
			
	F.Intrinsic.Control.Next(V.Local.iRow)
	
	F.Automation.MSExcel.DestroyAllObjects("MSExcel","UPL","UPLSheet")
	
	f.Intrinsic.Control.CallSub("Unload")
	

'F.Intrinsic.Control.Catch
'    F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
'    F.Intrinsic.UI.Msgbox(V.Local.sError)
'       F.Intrinsic.Control.CallSub("Unload")
'F.Intrinsic.Control.EndTry
Program.Sub.cmdLoad_Click.End

Program.Sub.cmdBrowse_Click.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	v.Local.sFilePath.Declare
	v.Local.sDir.Declare
	
	F.Intrinsic.UI.ShowOpenFileDialog("","Excel Files|*.xls;*.xlsx","",V.Local.sFilePath)
	
	F.Intrinsic.Control.If(V.Local.sFilePath,=,"***CANCEL***")
		F.Intrinsic.UI.Msgbox("No File Was Selected")
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf
	gui.Form.txtFile.Text(v.Local.sFilePath)

F.Intrinsic.Control.Catch
    F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
    F.Intrinsic.UI.Msgbox(V.Local.sError)
       F.Intrinsic.Control.CallSub("Unload")
F.Intrinsic.Control.EndTry
Program.Sub.cmdBrowse_Click.End

Program.Sub.Form_UnLoad.Start
f.Intrinsic.Control.CallSub("Unload")
Program.Sub.Form_UnLoad.End

Program.Sub.Comments.Start
${$5$}$2.0.0.0$}$2
${$6$}$tdjohan$}$20200925162044856$}$8rAQhOSvlohpQhMDm1j544LwmwXnRbkhjDhFkKDofa+duqoKjLqXcnN7SBUJaHg9PZBzDtMRlYI=
Program.Sub.Comments.End